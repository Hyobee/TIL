{"ast":null,"code":"var _jsxFileName = \"/Users/hyobinjin/work/sparta/TIL/sparta_react/week-1/src/BucketList.js\";\n// 리액트 패키지를 불러옵니다.\nimport React from 'react'; // 함수형 컴포넌트는 이렇게 쓸 수도 있고\n// function Bucketlist(props){\n//     return (\n//         <div>버킷 리스트</div>\n//     );\n// }\n// 이렇게 쓸 수도 있어요. =>가 들어간 함수를 화살표 함수라고 불러요.\n// 저희는 앞으로 화살표 함수를 사용할거예요.\n// 앗 () 안에 props! 부모 컴포넌트에게 받아온 데이터입니다.\n// js 함수가 값을 받아오는 것과 똑같이 받아오네요.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BucketList = ({\n  list\n}) => {\n  // Quiz 1: my_list에 ['a', 'b', 'c'] 대신 부모 컴포넌트가 넘겨준 값을 넣으려면 어떻게 해야할까요?\n  const my_lists = ['a', 'b', 'c']; // 컴포넌트가 뿌려줄 ui 요소(리엑트 엘리먼트라고 불러요.)를 반환해줍니다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: // js의 내장 함수 중 하나인 map입니다. 리스트의 갯수만큼 => 오른쪽 구문을 반복해요. \n    // 자세한 사용법은 아래 링크를 확인해주세요.\n    // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n    my_lists.map((list, index) => {\n      // 콘솔을 확인해봅시다 :)\n      console.log(list);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: list\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 29\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}; // 우리가 만든 함수형 컴포넌트를 export 해줍니다.\n// export 해주면 다른 컴포넌트에서 BucketList 컴포넌트를 불러다 쓸 수 있어요.\n\n\n_c = BucketList;\nexport default BucketList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BucketList\");","map":{"version":3,"sources":["/Users/hyobinjin/work/sparta/TIL/sparta_react/week-1/src/BucketList.js"],"names":["React","BucketList","list","my_lists","map","index","console","log"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;AACA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAE3B;AACA,QAAMC,QAAQ,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAjB,CAH2B,CAK3B;;AACA,sBACI;AAAA,cAEQ;AACA;AACA;AACAA,IAAAA,QAAQ,CAACC,GAAT,CAAa,CAACF,IAAD,EAAOG,KAAP,KAAiB;AAC1B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,0BAAQ;AAAA,kBAAkBA;AAAlB,SAAUG,KAAV;AAAA;AAAA;AAAA;AAAA,cAAR;AACH,KAJD;AALR;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CApBD,C,CAsBA;AACA;;;KAvBMJ,U;AAwBN,eAAeA,UAAf","sourcesContent":["// 리액트 패키지를 불러옵니다.\nimport React from 'react'; \n\n// 함수형 컴포넌트는 이렇게 쓸 수도 있고\n// function Bucketlist(props){\n//     return (\n//         <div>버킷 리스트</div>\n//     );\n// }\n\n// 이렇게 쓸 수도 있어요. =>가 들어간 함수를 화살표 함수라고 불러요.\n// 저희는 앞으로 화살표 함수를 사용할거예요.\n// 앗 () 안에 props! 부모 컴포넌트에게 받아온 데이터입니다.\n// js 함수가 값을 받아오는 것과 똑같이 받아오네요.\nconst BucketList = ({list}) => {\n    \n    // Quiz 1: my_list에 ['a', 'b', 'c'] 대신 부모 컴포넌트가 넘겨준 값을 넣으려면 어떻게 해야할까요?\n    const my_lists = ['a', 'b', 'c'];\n\n    // 컴포넌트가 뿌려줄 ui 요소(리엑트 엘리먼트라고 불러요.)를 반환해줍니다.\n    return (\n        <div>\n            {\n                // js의 내장 함수 중 하나인 map입니다. 리스트의 갯수만큼 => 오른쪽 구문을 반복해요. \n                // 자세한 사용법은 아래 링크를 확인해주세요.\n                // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n                my_lists.map((list, index) => {\n                    // 콘솔을 확인해봅시다 :)\n                    console.log(list);\n                    return (<div key={index}>{list}</div>);\n                })\n            }\n        </div>\n    );\n}\n\n// 우리가 만든 함수형 컴포넌트를 export 해줍니다.\n// export 해주면 다른 컴포넌트에서 BucketList 컴포넌트를 불러다 쓸 수 있어요.\nexport default BucketList;"]},"metadata":{},"sourceType":"module"}